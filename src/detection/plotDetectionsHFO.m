% plot the events being detected on the responses generated by a single stimulated channel
% input parameter is the following struct:
%     hfoPlotStruct.signal = hfoSignal;                 %eeg signal from a given channel
%     hfoPlotStruct.samplingRate = samplingRate;        %
%     hfoPlotStruct.filterOrder = 128;                  %  
%     hfoPlotStruct.periodToPlot = 1;   % in seconds    % Time Window used to plot the detections
%     hfoPlotStruct.hfoDetections = hfoDetections;      %struct containing the info on the detections(hfoDetections.mark, hfoDetections.startSample, hfoDetections.endSample)
%     hfoPlotStruct.plotsDir = plotsDir;                %Path to folder were plot will be saved
%     hfoPlotStruct.montageName = montageName;          %Name of the channel
    
function plotDetectionsHFO(hfoPlotStruct)
    %transform to uV
    hfoSignal = hfoPlotStruct.signal*1000*1000;
    samplingRate = hfoPlotStruct.samplingRate;

    %Variables from the complete signal
    order = hfoPlotStruct.filterOrder;
    filterDelay = order/2;
    h = fir1(order/2, [80/(samplingRate/2) 250/(samplingRate/2)], 'bandpass'); % 'low' | 'bandpass' | 'high' | 'stop' | 'DC-0' | 'DC-1'
    filteredRippleSignalWhole = filter(h, 1, flip(hfoSignal));
    filteredRippleSignalWhole = filter(h, 1, flip(filteredRippleSignalWhole));
    filteredRippleSignalWhole(1:filterDelay) = filteredRippleSignalWhole(filterDelay+1);
    filteredRippleSignalWhole(end-filterDelay:end) = filteredRippleSignalWhole(end-filterDelay-1);
    
    h = fir1(order/2, [250/(samplingRate/2) 500/(samplingRate/2)], 'bandpass'); % 'low' | 'bandpass' | 'high' | 'stop' | 'DC-0' | 'DC-1'
    filteredFR_SignalWhole = filter(h, 1, flip(hfoSignal));
    filteredFR_SignalWhole = filter(h, 1, flip(filteredFR_SignalWhole));
    filteredFR_SignalWhole(1:filterDelay) = filteredFR_SignalWhole(filterDelay+1);
    filteredFR_SignalWhole(end-filterDelay:end) = filteredFR_SignalWhole(end-filterDelay-1);
    
    timeWhole = 0:length(hfoSignal)-1;
    timeWhole = timeWhole/samplingRate;


    [cfs,frq, coi] = cwt(hfoSignal, 'amor', samplingRate, 'FrequencyLimits',[60 600]);
    absCFS_Raw = abs(cfs);
    normCFS_Raw= (absCFS_Raw - mean(absCFS_Raw, 'all'))/std(absCFS_Raw, 0, 'all');
    
    [cfs,frq, coi] = cwt(filteredRippleSignalWhole, 'amor', samplingRate, 'FrequencyLimits',[60 600]);
    absCFS_Ripples = abs(cfs);
    normCFS_Ripples= (absCFS_Ripples - mean(absCFS_Ripples, 'all'))/std(absCFS_Ripples, 0, 'all');

    [cfs,frq, coi] = cwt(filteredFR_SignalWhole, 'amor', samplingRate, 'FrequencyLimits',[60 600]);
    absCFS_FR = abs(cfs);
    normCFS_FR= (absCFS_FR - mean(absCFS_FR, 'all'))/std(absCFS_FR, 0, 'all');
    
    normCFS_Whole = (normCFS_Raw + normCFS_Ripples + normCFS_FR)/3;

%     normCFS_Whole(frq < 250,:) = (absCFS(frq < 250,:) - mean(absCFS(frq < 250,:), 'all'))/std(absCFS(frq < 250,:), 0, 'all');
%     normCFS_Whole(frq >= 250,:) = (absCFS(frq >= 250,:) - mean(absCFS(frq >= 250,:), 'all'))/std(absCFS(frq >= 250,:), 0, 'all');

    %Plot every X second
    periodToPlot = hfoPlotStruct.periodToPlot;   % in seconds
    signalLength = length(filteredRippleSignalWhole);
    for loopSample = 1:samplingRate*periodToPlot:hfoPlotStruct.lastSample
        startS = loopSample;
        endS = startS + samplingRate*periodToPlot - 1;
        if startS >=  hfoPlotStruct.lastSample || endS >  hfoPlotStruct.lastSample
            break;
        end

        %select the variables for teh corresponding plot
        filteredRippleSignal = filteredRippleSignalWhole(startS:endS);
        filteredFR_Signal = filteredFR_SignalWhole(startS:endS);

        time = timeWhole(startS:endS);
        normCFS = normCFS_Whole(:, startS:endS);
        rawSignal = hfoSignal(startS:endS);
        selectedHFO_Detections = hfoPlotStruct.hfoDetections;
        ignoreIdxs = selectedHFO_Detections.startSample < startS | selectedHFO_Detections.endSample > endS;
        selectedHFO_Detections.mark(ignoreIdxs) = [];
        selectedHFO_Detections.startSample(ignoreIdxs) = [];
        selectedHFO_Detections.endSample(ignoreIdxs) = [];

        if not(isempty(selectedHFO_Detections.mark))
            close all;
            clear h;
            figName = strcat(hfoPlotStruct.montageName, '-', num2str(int64(startS/samplingRate)), 's');
            f2 = figure('Name', figName,'NumberTitle','off', 'Color', 'w');
            subplot(4,1,1)
            h1 = plot(time(), filteredRippleSignal,'k','LineWidth',0.01); hold on;
            h1.Color(4) = 0.3;
            legendStr{1} = 'Band-Passed (80-250 Hz)';
            legendIdx = 2;
            nrRipples = 0;
            nrIESRipples = 0;
            for detIdx = 1:length(selectedHFO_Detections.mark)
                allRipples = selectedHFO_Detections.mark(detIdx) == 1;     
                if allRipples
                    startSample = selectedHFO_Detections.startSample(detIdx)-startS+1;
                    endSample = selectedHFO_Detections.endSample(detIdx)-startS;
                    h2 = plot(time(startSample:endSample), filteredRippleSignal(startSample:endSample),'b','LineWidth',0.01); hold on;
                    nrRipples = nrRipples+1;
                end
                allIES_Ripples = selectedHFO_Detections.mark(detIdx) == 4;
                if allIES_Ripples
                    startSample = selectedHFO_Detections.startSample(detIdx)-startS+1;
                    endSample = selectedHFO_Detections.endSample(detIdx)-startS;
                    h3 = plot(time(startSample:endSample), filteredRippleSignal(startSample:endSample),'m','LineWidth',0.01); hold on;
                    nrIESRipples = nrIESRipples+1;
                end
            end
            legendArray = h1;
            if nrRipples > 0 
                legendStr{legendIdx} = strcat('Ripple Detections (', num2str(nrRipples), ')');
                legendIdx = legendIdx+1;
                legendArray = cat(2, legendArray, h2);
            end
            if nrIESRipples > 0
                legendStr{legendIdx} = strcat('IES-Ripples Detections (', num2str(nrIESRipples), ')');
                legendIdx = legendIdx+1;
                legendArray = cat(2, legendArray, h3);
            end
            xlim([min(time) max(time)])
            xlabel('Time (s)')
            ylabel('Amplitude (uV)')
            title('All Ripples', 'FontSize',20)
            [~, hobj, ~, ~] = legend(legendArray, legendStr, 'FontSize',16, 'Box', 'off');
            hl = findobj(hobj,'type','line');
            set(hl,'LineWidth',5);

            subplot(4,1,2)
            hfoPlot = plot(time(), filteredFR_Signal,'k','LineWidth',0.01); hold on;
            hfoPlot.Color(4) = 0.2;
            legendStr{1} = 'Band-Passed (250-500 Hz)';
            legendIdx = 2;
            nrFR = 0;
            nrIESFR = 0;
            for detIdx = 1:length(selectedHFO_Detections.mark)
                allFR = selectedHFO_Detections.mark(detIdx) == 2;
                if allFR
                    startSample = selectedHFO_Detections.startSample(detIdx)-startS+1;
                    endSample = selectedHFO_Detections.endSample(detIdx)-startS;
                    plot(time(startSample:endSample), filteredFR_Signal(startSample:endSample),'g','LineWidth',0.01); hold on;
                    nrFR = nrFR+1;
                end
                allIES_FR = selectedHFO_Detections.mark(detIdx) == 5;
                if allIES_FR
                    startSample = selectedHFO_Detections.startSample(detIdx)-startS+1;
                    endSample = selectedHFO_Detections.endSample(detIdx)-startS;
                    plot(time(startSample:endSample), filteredFR_Signal(startSample:endSample),'c','LineWidth',0.01); hold on;
                    nrIESFR = nrIESFR+1;
                end
            end
            if nrFR > 0 
                legendStr{legendIdx} = strcat('FR Detections (', num2str(nrFR), ')');
                legendIdx = legendIdx+1;
            end
            if nrIESFR > 0
                legendStr{legendIdx} = strcat('IES-FR Detections (', num2str(nrIESFR), ')');
                legendIdx = legendIdx+1;
            end
            xlim([min(time) max(time)])
            xlabel('Time (s)')
            ylabel('Amplitude (uV)')
            title('All FR', 'FontSize',20)
            [~, hobj, ~, ~] = legend(legendStr, 'FontSize',16, 'Box', 'off');                
            hl = findobj(hobj,'type','line');
            set(hl,'LineWidth',5);

            subplot(4,1,3)
            rawSignal = detrend(rawSignal);
            hfoPlot = plot(time, rawSignal,'k','LineWidth',0.01); hold on;
            hfoPlot.Color(4) = 0.2;
            nrEOI = 0;
            for detIdx = 1:length(selectedHFO_Detections.mark)
                ies = selectedHFO_Detections.mark(detIdx) == 3;
                if ies
                    startSample = selectedHFO_Detections.startSample(detIdx)-startS+1;
                    endSample = selectedHFO_Detections.endSample(detIdx)-startS;
                    plot(time(startSample:endSample), rawSignal(startSample:endSample),'r','LineWidth',0.01); hold on;
                    nrEOI = nrEOI+1;
                end
            end
            title('IES', 'FontSize',20)
            xlim([min(time) max(time)])
            xlabel('Time (s)')
            ylabel('Amplitude (uV)')
            [~, hobj, ~, ~] = legend('Raw',  strcat('IES Detections (', num2str(nrEOI), ')'), 'FontSize',16, 'Box', 'off');
            hl = findobj(hobj,'type','line');
            set(hl,'LineWidth',5);

            %ylabel('Amplitude')


            %Plot wavelet decomposition
            subplot(4,1,4)
            contour(time,frq,abs(normCFS), 'LineStyle','none', 'LineColor',[0 0 0], 'Fill','on')
            title('Wavelet Power Spectrum')
            %colorbar
            xlabel('Time (s)')
            ylabel('Frequency (Hz)')
            set(gcf,'Colormap',jet)
            set(gca,'XLim',[min(time) max(time)], 'YLim',[min(frq) max(frq)],'XGrid','On', 'YGrid','On')
            colorbar('east', 'AxisLocation','in', 'Color', 'w', 'FontSize', 12)
            %caxis([min(normCFS_Whole,[],'all') max(normCFS_Whole,[],'all')])

            set(gcf, 'Position', get(0, 'Screensize'));

            figOneFileName =  strcat(hfoPlotStruct.plotsDir, hfoPlotStruct.montageName, '_', num2str(int64(startS/samplingRate)), 's');
            %savefig(f2, figOneFileName, 'compact');
            hgexport(gcf, figOneFileName, hgexport('factorystyle'), 'Format', 'jpeg');
            close();
        end
    end    
end